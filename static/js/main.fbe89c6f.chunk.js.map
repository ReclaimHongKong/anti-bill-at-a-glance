{"version":3,"sources":["app/app.styles.js","app/components/eventList/index.styles.js","app/components/eventItem/index.styles.js","app/components/eventItem/index.js","app/components/eventList/index.js","app/App.js","serviceWorker.js","index.js"],"names":["scaleUpBottom","keyframes","_templateObject","Application","styled","div","_templateObject2","Header","_templateObject3","Subheader","_templateObject4","Content","_templateObject5","Year","_templateObject6","Month","_templateObject7","EventList","index_styles_templateObject","Day","index_styles_templateObject2","index_styles_templateObject3","Side","index_styles_templateObject4","index_styles_templateObject5","EventItem","eventItem_index_styles_templateObject","TimelineHeader","eventItem_index_styles_templateObject2","TimelineContent","eventItem_index_styles_templateObject3","eventItem","_ref","type","title","content","responder","demands","react_default","a","createElement","toUpperCase","eventList","month","events","Fragment","Object","keys","map","date","index","key","concat","index_styles_Content","event","console","log","components_eventItem","assign","App","data","className","subtitle","year","components_eventList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","app_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fbe89c6f.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\n\n/**\n * Animation\n */\nconst scaleUpBottom = keyframes`\n  0% {\n    transform: scale(0.5);\n    transform-origin: 50% 100%;\n  }\n  100% {\n    transform: scale(1);\n    transform-origin: 50% 100%;\n  }\n`\n\n/**\n * Main components\n */\nexport const Application = styled.div`\n  text-align: left;\n  background-color: #0f1013;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Header = styled.div`\n  font-size: 2vh;\n  animation: ${scaleUpBottom} 0.7s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\n`\n\nexport const Subheader = styled.div`\n  background-color: #ffff00;\n  front-size: 1.5vh\n  color: #000000;\n`\n\nexport const Content = styled.div`\n`\n\nexport const Year = styled.div``\n\nexport const Month = styled.div`\n`\n\n","import styled from \"styled-components\";\n\nexport const EventList =styled.div`\n`\nexport const Month = styled.div``\nexport const Day = styled.div`\n`\n\nexport const Side = styled.div`\n`\n\nexport const Content = styled.div`\n`","import styled from \"styled-components\";\n\nexport const EventItem = styled.div`\n  color: #ffffff;\n`\n\nexport const TimelineHeader = styled.div`\n  background: #ffff00;\n  color: #000000;\n`\n\nexport const TimelineContent = styled.div`\n  color: #ffff00;\n`","import React from 'react';\nimport {\n  EventItem,\n  TimelineHeader,\n  TimelineContent\n} from './index.styles';\n\nconst eventItem = ({\n  type,\n  title,\n  content,\n  responder,\n  demands\n}) => {\n  // TODO:\n  switch (type) {\n    case \"scarification\":\n      //TODO:\n      return (\n        <EventItem></EventItem>\n      )\n    case \"demands\":\n      return (\n        <EventItem></EventItem>\n      )\n    case \"response\":\n      return (\n        <EventItem></EventItem>\n      )\n    case \"timeline\":\n    default:\n      return (\n        <EventItem>\n          <TimelineHeader>{title.toUpperCase()}</TimelineHeader>\n          <TimelineContent>{content}</TimelineContent>\n        </EventItem>\n      )\n  }\n}\n\nexport default eventItem;\n","import React from 'react';\nimport { EventList, Day, Side, Content, Month } from './index.styles';\nimport EventItem from '../eventItem';\n\nconst eventList = ({\n  month,\n  events\n}) => {\n  return (\n    <React.Fragment>\n    {Object.keys(events).map((date, index) => (\n      <EventList key={`eventlist-${index}`}>\n        <Side>\n          <Day>{date}</Day>\n        </Side>\n        <Content>\n          {events[date].map((event, index) => {\n            console.log(event)\n            return (<EventItem {...event} key={`item-${index}`} />)\n          })}\n        </Content>\n      </EventList>\n    ))}\n    </React.Fragment>\n  )\n}\n\nexport default eventList;","import React from 'react';\nimport {\n  Application,\n  Header,\n  Subheader,\n  Content,\n  Year,\n  Month\n} from './app.styles';\nimport EventList from './components/eventList';\nimport data from './json/history/en-us.json';\n\nfunction App() {\n  console.log(data);\n  return (\n    <Application className=\"App\">\n      <Header>{data.title.toUpperCase()}</Header>\n      <Subheader>{data.subtitle.toUpperCase()}</Subheader>\n      <Content>\n        {Object.keys(data.events).map(year => {\n            return (\n              <React.Fragment>\n                <Year>{year}</Year>\n                {Object.keys(data.events[year]).map((month, index) => {\n                  return (\n                    <React.Fragment>\n                      <Month>{month}</Month>\n                      <EventList\n                        key={`eventlist-${year}-${month}-${index}`}\n                        month={month}\n                        events={data.events[year][month]}\n                      />\n                    </React.Fragment>\n                  );\n                })}\n              </React.Fragment>\n            )}\n        )}\n      </Content>\n    </Application>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}